/*
 * xnat-jupyterhub-plugin: build.gradle
 */
plugins {
    id "java"
    id "org.nrg.xnat.build.xnat-data-builder" version "1.8.8"
    id "io.freefair.lombok" version "6.0.0-m2"
    id "com.palantir.git-version" version "0.12.1"
    id "jacoco"
}

group "org.nrg.xnatx.plugins"
version "1.0.0-RC2"
description "JupyterHub Plugin for XNAT"

repositories {
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    mavenLocal()
    mavenCentral()
    maven { url "https://www.dcm4che.org/maven2" }
}

configurations {
    implementation.extendsFrom(xnatProvided)
    implementation.canBeResolved(true)
    testImplementation.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
}

dependencies {
    xnatProvided platform("org.nrg:parent:1.8.8.1")
    xnatProvided "org.nrg:framework"
    xnatProvided "org.nrg.xnat:xnat-data-models"
    xnatProvided "org.nrg.xnat:web"
    xnatProvided "org.nrg.xdat:core"
    xnatProvided "io.springfox:springfox-swagger2"
    xnatProvided "io.springfox:springfox-swagger-ui"
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.24'
    testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-guava"
    testImplementation "junit:junit"
    testImplementation "com.h2database:h2"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation "org.springframework:spring-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.security:spring-security-config"
    testImplementation "org.springframework:spring-jdbc"
    testImplementation "org.springframework:spring-orm"
    testImplementation "org.apache.commons:commons-dbcp2"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnit()
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"
def isDirty, branchName, gitHash, gitHashFull, commitDistance, lastTag, isCleanTag

try {
    def gitDetails = versionDetails()
    isDirty = gitVersion().endsWith ".dirty"
    branchName = gitDetails.branchName ?: "Unknown"
    gitHash = gitDetails.gitHash
    gitHashFull = gitDetails.gitHashFull
    commitDistance = gitDetails.commitDistance
    lastTag = gitDetails.lastTag
    isCleanTag = gitDetails.isCleanTag
} catch (IllegalArgumentException ignored) {
    logger.info "Got an error trying to read VCS metadata from git. It's possible this project is not under VCS control. Using placeholder values for manifest entries."
    isDirty = true
    branchName = "Unknown"
    gitHash = "None"
    gitHashFull = "None"
    commitDistance = 0
    lastTag = "None"
    isCleanTag = false
}

logger.info "Build-Date:              ${buildDate}"
logger.info "Build-Number:            ${buildNumber}"
logger.info "Implementation-Version:  ${version}"
logger.info "Implementation-Sha-Full: ${gitHashFull}"
logger.info "Implementation-Sha:      ${gitHash}"
logger.info "Implementation-Commit:   ${commitDistance}"
logger.info "Implementation-LastTag:  ${lastTag}"
logger.info "Implementation-Branch:   ${branchName}"
logger.info "Implementation-CleanTag: ${isCleanTag}"
logger.info "Implementation-Dirty:    ${isDirty}"

ext.gitManifest = manifest {
    attributes "Application-Name": "XNAT-JUPYTERHUB-PLUGIN",
            "Build-Date": buildDate,
            "Build-Number": buildNumber,
            "Implementation-Version": project.version,
            "Implementation-Sha": gitHash,
            "Implementation-Sha-Full": gitHashFull,
            "Implementation-Commit": commitDistance,
            "Implementation-LastTag": lastTag,
            "Implementation-Branch": branchName,
            "Implementation-CleanTag": isCleanTag,
            "Implementation-Dirty": isDirty
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

// Configure the compileJava task to call the xnatDataBuilder task before trying to compile any
// Java code in the plugin. This is required for custom data types
compileJava.dependsOn project.tasks["xnatDataBuilder"]

// Not required in a standard build, but the XNAT data builder generates code from XNAT data-type
// schemas that the compiler needs to know about.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir 'src/main/resources'
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

jar {
    manifest = project.manifest {
        from gitManifest
    }
    from {
        (configurations.implementation - configurations.xnatProvided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

tasks.register('deploy-jar', Copy) {
    description = "Copies the JAR file to a specified location. Requires the 'filePath' property to be set. Example: ./gradlew clean jar deploy-jar -PfilePath=/path/to/destination"
    from jar
    into project.findProperty('filePath')
}
