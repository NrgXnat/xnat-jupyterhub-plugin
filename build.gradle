/*
 * xnat-jupyterhub-plugin: build.gradle
 */
plugins {
    id "java"
    id "org.nrg.xnat.build.xnat-data-builder" version "1.8.10"
    id "io.freefair.lombok" version "6.0.0-m2"
    id "jacoco"
}

group "org.nrg.xnatx.plugins"
version "1.2.0-rc.2"
description "JupyterHub Plugin for XNAT"

repositories {
    mavenLocal()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    mavenCentral()
    maven { url "https://www.dcm4che.org/maven2" }
}

configurations {
    implementation.extendsFrom(xnatProvided)
    implementation.canBeResolved(true)
    testImplementation.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
}

dependencies {
    xnatProvided platform("org.nrg:parent:1.8.10")
    xnatProvided "org.nrg:framework"
    xnatProvided "org.nrg.xnat:xnat-data-models"
    xnatProvided "org.nrg.xnat:web"
    xnatProvided "org.nrg.xdat:core"
    xnatProvided "io.springfox:springfox-swagger2"
    xnatProvided "io.springfox:springfox-swagger-ui"
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.24'
    testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-guava"
    testImplementation "junit:junit"
    testImplementation "com.h2database:h2"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation "org.springframework:spring-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.security:spring-security-config"
    testImplementation "org.springframework:spring-jdbc"
    testImplementation "org.springframework:spring-orm"
    testImplementation "org.apache.commons:commons-dbcp2"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnit()
}

def buildDate = new Date()

// Pulls in GitHub Actions environment variables if available.
def github_actor = System.getenv().GITHUB_ACTOR ?: "Unknown"
def github_repo = System.getenv().GITHUB_REPOSITORY ?: "Unknown"
def github_sha = System.getenv().GITHUB_SHA ?: "Unknown"
def github_ref = System.getenv().GITHUB_REF ?: "Unknown"

ext.gitManifest = manifest {
    attributes "Application-Name": "PIXI-PLUGIN",
            "Build-Date": buildDate,
            "GITHUB-ACTOR": github_actor,
            "GITHUB-REPO": github_repo,
            "GITHUB-SHA": github_sha,
            "GITHUB-REF": github_ref
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

// Configure the compileJava task to call the xnatDataBuilder task before trying to compile any
// Java code in the plugin. This is required for custom data types
compileJava.dependsOn project.tasks["xnatDataBuilder"]

// Not required in a standard build, but the XNAT data builder generates code from XNAT data-type
// schemas that the compiler needs to know about.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir 'src/main/resources'
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

jar {
    manifest = project.manifest {
        from gitManifest
    }
    from {
        (configurations.implementation - configurations.xnatProvided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

tasks.register('deploy-jar', Copy) {
    description = "Copies the JAR file to a specified location. Requires the 'filePath' property to be set. Example: ./gradlew clean jar deploy-jar -PfilePath=/path/to/destination"
    from jar
    into project.findProperty('filePath')
}
